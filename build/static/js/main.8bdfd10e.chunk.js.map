{"version":3,"sources":["reducers/reducerSelectedUser.js","reducers/index.js","reducers/reducerUsers.js","components/SagaHeader.js","components/SagaImageGrid.js","components/App3.js","action/index.js","containers/usersList.js","containers/userDetails.js","components/ReduxForm.js","components/FormicFormClassComponent.js","action/actionPractice.js","components/App.js","serviceWorker.js","components/home.jsx","components/errors404.jsx","components/loginForm.js","components/dynamicFormsComponents/dynamicFom.js","components/ClassCounterHook.jsx","components/FetchData.js","components/LiftingStateUpComponent.js","components/SagaStatusConstants.js","components/StateLiftedParent.js","reducers/SagaLoadingReducer.js","reducers/SagaImageReducer.js","reducers/SagaErrorReducer.js","reducers/SagaCombinedReducer.js","index.js"],"names":["state","action","type","payload","data","combineReducers","users","id","first","last","age","description","thumbnail","activeUser","ActiveUserReducer","InputBoxesUpdater","form","formReducer","HeaderSection","props","Component","ImageGrid","selectUser","user","console","log","fetchedData","latitude","longitude","fetch","then","response","json","myJsonData","JSON","stringify","coord","lon","lat","UsersList","this","map","key","onClick","createListItems","activeUsers","connect","dispatch","bindActionCreators","UserDetails","ReduxSignUpForm","submit","values","e","firstName","lastName","email","error","isError","trim","length","test","SubmissionError","renderField","label","input","meta","touched","warning","className","onSubmit","handleSubmit","name","component","reduxForm","SignupSchema","Yup","shape","userName","min","max","required","password","companyName","postData","a","url","method","mode","cache","credentials","headers","Authorization","redirect","referrer","body","flagType","variations","ReduxApp","myAllwishes","onFormSubmitMark","preventDefault","onChange","setState","personName","target","value","personWish","bind","myname","mywish","item","idx","Math","random","Input","changedInput1Value","ChangeInputBox1","placeholder","changeName","addWish","React","wish","inputBoxChanger","resp","resp2","jwtToken","event","ChangeInputBoxValue","Boolean","window","location","hostname","match","home","currentUserName","username","currentEmail","Errors404","FeatureCreateSchema","featureName","featureKey","featureDesc","variationArray","of","variationName","variationKey","variationDesc","friends","salary","featuresList","Array","getSuggestions","inputValue","toLowerCase","inputLength","filter","specificFeature","slice","getSuggestionValue","suggestion","renderSuggestion","MyForm","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","handleSwitchChange","checked","featureItem","handleVariationChange","variationItem","newValue","searchText","toUpperCase","renderSearch","searchTheArray","SearchNow","addFeature","prevState","temp_featurekey","featureNo","maxIDreached","temp_featurename","temp_featuredesc","switchOn","Variation","TemporaryVariations","updateRecommender","userData","temp_featureboolean","status","code","alert","variationNo","toggle","addVariation","currentTempVarIDX","forceUpdate","temp_bool_on_true","temp_bool_off_true","dropdownOpen","searchedFeatureIndexes","modal","tempvarvalueOnChange","tempkeyvalueOnChange","tempdescvalueOnChange","featureNameChange","featureKeyChange","featureDescChange","featureBooleanChange","toggleForDropDown","val","startsWith","push","lastFeatureIndex","obj","setFieldValue","currentTarget","textContent","inputProps","class","style","display","color","initialValues","validationSchema","actions","setTimeout","setSubmitting","render","arrayHelpers","friend","index","remove","Modal","centered","aria-hidden","isOpen","ModalHeader","ModalBody","onBlur","handleBlur","width","Dropdown","DropdownToggle","caret","DropdownMenu","DropdownItem","header","disabled","divider","active","variationsId","keysId","descriptionsId","ModalFooter","height","src","featureId","descriptionId","switchOnId","htmlFor","data_id","ChildListStateUp","incrementCount","count","IMAGES","loadingReducer","imageReducer","images","errorReducer","isloading","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8bdfd10e.chunk.js","sourcesContent":["//a reducer that selects unique item and gives it's results\nexport default function(state = \"\", action) {\n  switch (action.type) {\n    case \"USER_SELECTED\":\n      return action.payload;\n    case \"fetchedData\":\n      return action.payload;\n    case \"FETCH_WEATHER_DATA\":\n      return action.data;\n    case \"INPUT_STATE_UPDATE\":\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n\nexport const InputBoxesUpdater = (state = \"\", action) => {\n  switch (action.type) {\n    case \"INPUT_STATE_UPDATE\": \n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n","//COMBINE REDUCERS WILL COMBINE TO MAKE ONE SINGLE JS OBJECT IE THE STORE\nimport { combineReducers } from \"redux\";\nimport ActiveUserReducer from \"./reducerSelectedUser\";\nimport UserReducer from \"./reducerUsers\";\nimport InputBoxesUpdater from \"./reducerSelectedUser\";\nimport { reducer as formReducer } from \"redux-form\";\n\n//import DataFetching from \"./reducerUsers\";\n//THIS IS THE MAIN BIG OBJECT THAT IS GOING TO BE\n//THTROWN INSIDE THE STORE\n//  HERE this object users is all equal to the whole data in\n//  the reducerUsers File\n\n//const instance = new DataFetching(); // Data Fetching {}\n//const result = instance.dataFetchedResult(); //all data\n//const UserReducer = result;\n\nconst allReducers = combineReducers({\n  users: UserReducer,\n  activeUser: ActiveUserReducer,\n  InputBoxesUpdater,\n  form: formReducer\n});\n\n//REDUCER RETURNS AN OBJECT of many data object\n//COMBINED REUDUCER RETURNS A LIST OF DATA OBJECT of\n//differnt types(like mobvies,users, etc) and\n//form the one big JAVASCRIPT OBJECT OUT OF IT\n//THAT CAN BE USED TO SEND IN STORE LATER ONWARDS\n\nexport default allReducers;\n","export default function() {\n  //returns an array of 3 users(SAVED AS JSON OBJECTS EACH)\n\n  return [\n    {\n      id: 1,\n      first: \"Talha\",\n      last: \"Shahab\",\n      age: \"23\",\n      description: \"Programmer\",\n      thumbnail: \"http://personal.psu.edu/xqz5228/jpg.jpg\"\n    },\n    {\n      id: 2,\n      first: \"Panda\",\n      last: \"Guy\",\n      age: \"45\",\n      description: \"Fat\",\n      thumbnail: \"https://tinyjpg.com/images/social/website.jpg\"\n    },\n    {\n      id: 3,\n      first: \"Crazy\",\n      last: \"People\",\n      age: \"100\",\n      description: \"Adventurers\",\n      thumbnail:\n        \"https://upload.wikimedia.org/wikipedia/en/3/3f/Oxalis_tetraphylla_flower.jpg\"\n    }\n  ];\n}\n\n/**\n ,\n      {\n        id: 4,\n        first: \"Data Fetched \",\n        last: \"Weather API\",\n        age: data.coord.lon,\n        description: data.coord.lat,\n        thumbnail:\n          \"https://upload.wikimedia.org/wikipedia/en/3/3f/Oxalis_tetraphylla_flower.jpg\"\n      }\n */\n//}\n\n/*\nasync function dataFetchAsyncCall() {\n  console.log(\"calling\");\n\n  //const url = \"https://api.randomuser.me/\";\n  const url =\n    \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\";\n  //await waits for getting all data\n  const response = await fetch(url);\n  const data = await response.json();\n  console.log(\"DATA FETCH FROM URL: \\n\\n\" + data);\n  return data;\n}\n*/\n\n/*\n\nimport React, { Component } from \"react\";\nclass DataFetching extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weather: null\n    };\n  }\n\n\n async dataFetchedResult() {\n   //const url = \"https://api.randomuser.me/\";\n   const url =\n     \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\";\n   //await waits for getting all data\n   const response = await fetch(url);\n   const data = await response.json();\n   console.log(\"DATA FETCH FROM URL: \\n\\n\" + data);\n   // console.log(\"DATA FETCH FROM URL [results 0]: \\n\\n\" + data.results[0]);\n  // this.setState({ weather: data.coord, loading: false }, () => {\n   //  console.log(\"FIRST PERSON: \\n\\n\" + this.state.weather);\n  // });\n   \n    return [\n      {\n        id: 1,\n        first: \"Talha\",\n        last: \"Shahab\",\n        age: \"23\",\n        description: \"Programmer\",\n        thumbnail: \"http://personal.psu.edu/xqz5228/jpg.jpg\"\n      },\n      {\n        id: 2,\n        first: \"Panda\",\n        last: \"Guy\",\n        age: \"45\",\n        description: \"Fat\",\n        thumbnail: \"https://tinyjpg.com/images/social/website.jpg\"\n      },\n      {\n        id: 3,\n        first: \"Crazy\",\n        last: \"People\",\n        age: \"100\",\n        description: \"Adventurers\",\n        thumbnail:\n          \"https://upload.wikimedia.org/wikipedia/en/3/3f/Oxalis_tetraphylla_flower.jpg\"\n      },\n      {\n        id: 4,\n        first: \"Data Fetched \",\n        last: \"Weather API\",\n        age: this.state.weather.lon,\n        description: this.state.weather.lat,\n        thumbnail:\n          \"https://upload.wikimedia.org/wikipedia/en/3/3f/Oxalis_tetraphylla_flower.jpg\"\n      }\n    ];\n  }\n}\n\nexport default DataFetching;\n*/\n","import React, { Component } from \"react\";\nclass HeaderSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h5>Header Section</h5>\n      </div>\n    );\n  }\n}\n\nexport default HeaderSection;\n","import React, { Component } from \"react\";\nclass ImageGrid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h5>Image Grid</h5>\n      </div>\n    );\n  }\n}\n\nexport default ImageGrid;\n","import React, { Component } from \"react\";\n\nimport HeaderSection from \"./SagaHeader\";\nimport ImageGrid from \"./SagaImageGrid\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <h1>Redux Thunk</h1>\n        <HeaderSection />\n        <ImageGrid />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from \"axios\";\n\nexport default function randomFunction() {\n  console.log(\"RANDOM DEFUALT FUNCTION RUN\");\n}\n\n//ACTION IS OBJECT WITH TYPE AND PAYLOAD PARAMETERS\n//this funct is an action creatore - returns an objct called an action\nexport const selectUser = user => {\n  console.log(\"Click on user: \", user.first);\n\n  var fetchedData = { latitude: \"\", longitude: \"\" };\n\n  //1 fetch the data\n  //action is passed to a reducer!\n  //where based on type,\n  //payload data ie the user is refined\n\n  fetch(\n    \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\"\n  )\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(myJsonData) {\n      console.log(JSON.stringify(myJsonData));\n      console.log(\"Longitude Data: \" + JSON.stringify(myJsonData.coord.lon));\n      console.log(\"Latitude Data: \" + JSON.stringify(myJsonData.coord.lat));\n\n      //Updating our data object with the fetched Data\n      fetchedData.longitude = JSON.stringify(myJsonData.lon);\n      fetchedData.latitude = JSON.stringify(myJsonData.lat);\n    });\n\n  //2 return an action\n  /*\n  return {\n    type: \"USER_SELECTED\",\n    payload: user\n  };\n*/\n  console.log(\"long: \" + fetchedData.longitude);\n  console.log(\"lat: \" + fetchedData.latitude);\n\n  return {\n    type: \"fetchedData\",\n    payload: fetchedData\n  };\n};\n\nexport const UpdateInputState = (currentState, inputType) => {\n  console.log(\"INSIDE UpdateInputState aftter onchange\");\n  if (inputType == \"email\") {\n    console.log(\"update state condition meets for email\");\n\n    return {\n      type: \"INPUT_STATE_UPDATE\",\n      payload: { SignUpEmail: currentState }\n    };\n  } else if (inputType == \"name\") {\n    return {\n      type: \"INPUT_STATE_UPDATE\",\n      payload: { SignUpName: currentState }\n    };\n  } else if (inputType == \"pass\") {\n    return {\n      type: \"INPUT_STATE_UPDATE\",\n      payload: { SignUpPass: currentState }\n    };\n  }\n};\n\n//const apiUrl = \"https://api.github.com/users/KrunalLathiya\";\n\nexport const fetchMyWeatherData = () => {\n  return dispatch => {\n    dispatch({\n      type: \"FETCH_WEATHER_DATA\"\n    });\n    console.log(\"FETCH WEATHER FUNC RUN\");\n    var fetchedData = {\n      latitude: \"\",\n      longitude: \"\"\n    }; /*\n        let json = response.json();\n        if (response.status >= 200 && response.status < 300) {\n          return json;\n        } else {\n          return json.then(Promise.reject.bind(Promise));\n        }\n        */\n    //1 fetch the data\n    //action is passed to a reducer!\n    //where based on type,\n    //payload data ie the user is refined\n    /*\n    fetch(\n      \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\"\n    )\n      .then(async response => {\n        return await response.json();\n    */\n    //  })\n    //  .then(async myJsonData => {\n    /*\n          if (myJsonData.result && myJsonData.result.status === \"error\") {\n          } else {\n          }\n  */\n    /*\n        console.log(JSON.stringify(myJsonData));\n        console.log(\"Longitude Data: \" + JSON.stringify(myJsonData.coord.lon));\n        console.log(\"Latitude Data: \" + JSON.stringify(myJsonData.coord.lat));\n  \n        //Updating our data object with the fetched Data\n        fetchedData.longitude = await JSON.stringify(myJsonData.lon);\n        fetchedData.latitude = await JSON.stringify(myJsonData.lat);\n        console.log(\"Variable set for fetchData\");\n        return await fetchedData;\n      })\n      .then(async fetchedData => {\n        return await fetchData(fetchedData);\n      })\n      .then(async data => {\n        return await data;\n      })\n      .catch(async error => {\n        throw await error;\n      });\n  */\n\n    /*\n    return axios\n      .get(\n        \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\"\n      )\n      .then(res => {\n        res.json();\n      })\n      .then(data =>\n        dispatch({\n          type: \"FETCH_WEATHER_DATA\",\n          payload: data.data.coord.lat\n        })\n      )\n      .catch(error => {\n        dispatch({\n          type: \"FETCH_WEATHER_DATA_FAILED\",\n          payload: error\n        });\n        // throw error;\n      });\n    */\n    return dispatch({\n      type: \"\",\n      payload: {}\n    });\n  };\n};\n\n/*\nexport function XselectUser(user) {\n  return (dispatch, getState) => {\n    console.log(getState());\n\n    fetch(\n      \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\",\n      {\n        mode: \"no-cors\"\n      }\n    ).then(dispatch(selectUser(user)));\n  };\n}\n*/\n\n/**\n *\n export function fetchOffers() {\n  return function action(dispatch) {\n    dispatch({ type: FETCH_OFFERS })\n\n    const request = axios({\n      method: 'GET',\n      url: `${BASE_URL}/offers`,\n      headers: []\n    });\n\n    return request.then(\n      response => dispatch(fetchOffersSuccess(response)),\n      err => dispatch(fetchOffersError(err))\n    );\n  }\n}\n */\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\n//action imported\nimport { selectUser } from \"../action\";\n\n//ANY ACTION THAT OCCURS GOES DIRECTLY TO REDUCERS\nclass UsersList extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //select user is an action(action calls the reducer)\n  createListItems() {\n    //click krne pr action perform kare!\n    return this.props.users.map(user => {\n      return (\n        <li key={user.id} onClick={() => this.props.selectUser(user)}>\n          {user.first} {user.last}\n        </li>\n      );\n    });\n  }\n  render() {\n    return (\n      <div>\n        <ul>{this.createListItems()}</ul>\n        <br></br>\n        {this.props.activeUsers != null\n          ? this.props.activeUsers.latitude\n          : \"ACTIVE USERS NULL\"}\n      </div>\n    );\n  }\n}\n\n//map state to props takes out state from store and makes them the props of the component\n//when it renders\n\n//TAKES DATA FROM STORE INTO CURRENT STATE\n//maps the current state[STORE] of app to props of this componenet ie UsersList\nfunction mapStateToProps(state) {\n  //makes the state to 2nd reducer in all reducers\n  return {\n    users: state.users,\n    activeUsers: state.activeUser\n  };  \n}\n\n//defines an action(the one in index.js)\n//selectUser is an action exposed/dispatched after it was imported\n// from the actions folder\n\n//mapDispatchToProps is\n//used for dispatching actions to the store. (ACTION => STORE)\n//NOW STORE HAS AN ACTION\n//1 click\n//2 action selectUser\n//3 action => store (dispatch using matchDispatchToProps)\n//4\n//SENDS DATA TO STORE ON ACTION\nfunction matchDispatchToProps(dispatch) {\n  return bindActionCreators({ selectUser }, dispatch);\n}\n\n//defines that we can connect this func to user list\n//With react - redux.connect we can connect our redux store to a component:\nexport default connect(\n  mapStateToProps,\n  matchDispatchToProps\n)(UsersList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass UserDetails extends Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n\n    if (this.props.user == null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <br></br>\n        <h2>\n          Latitude:\n          {this.props.user.latitude}\n        </h2>\n        <br></br>\n        <h2>\n          Longitude:\n          {this.props.user.longitude}\n        </h2>\n        <br></br>\n      </div>\n    );\n  }\n\n\n}\n\n//1 makes the state to 1st reducer\n//2 THE state passed as parameter is the store\nfunction mapStateToProps(state) {\n  return {\n    user: state.activeUser\n  };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\n\n\n\n\n\n\n/*\nWHOLE RENDER PREVIOUSLY\n\n    if (this.props.user == null) {\n      return null;\n    }\n\n    return (\n      <div>\n        <img src={this.props.user.thumbnail} />\n        <br></br>\n        <h2>\n          {this.props.user.first} {this.props.user.last}\n        </h2>\n        <br></br>\n        <h2>\n          Age:\n          {this.props.user.age}\n        </h2>\n        <br></br>\n        <h2>\n          Description:\n          {this.props.user.description}\n        </h2>\n        <br></br>\n        <h2>\n          Latitude:\n          {this.props.user.latitude}\n        </h2>\n        <br></br>\n        <h2>\n          Longitude:\n          {this.props.user.longitude}\n        </h2>\n        <br></br>\n      </div>\n    );\n  }\n\n*/\n\n","import React, { Component } from \"react\";\nimport { Field, reduxForm, SubmissionError } from \"redux-form/immutable\";\n\nclass ReduxSignUpForm extends Component {\n  submit = (values, e, { firstName = \"\", lastName = \"\", email = \"\" }) => {\n    console.log(\"Submit inside form\");\n    console.log(\"Val2: \" + JSON.stringify(values));\n    //Always do JSON.stringify() when it show  Object Object in console\n\n    let error = {},\n      isError = false;\n\n    //use values.firstName.trim( for updated val\n    //1st\n    if (values.firstName.trim() === \"\") {\n      isError = true;\n      error.firstName = \"Required\";\n      console.log(\"First name req\");\n    } else if (firstName.length > 20) {\n      isError = true;\n      error.firstName = \"Too Long\";\n      console.log(\"First name req\");\n    } else if (firstName.length < 2) {\n      isError = true;\n      error.firstName = \"Minimum Length 2\";\n      console.log(\"First name req\");\n    } else {\n      isError = false;\n      console.log(\"First name req\");\n    }\n    console.log(\"1\" + error.firstName);\n\n    //2nd\n    if (lastName === \"\") {\n      isError = true;\n      error.lastName = \"Required\";\n      console.log(\"First name req\");\n    } else if (lastName.length > 20) {\n      isError = true;\n      error.firstName = \"Too Long\";\n      console.log(\"First name req\");\n    } else if (firstName.length < 2) {\n      isError = true;\n      error.firstName = \"Minimum Length 2\";\n      console.log(\"First name req\");\n    } else if (!isError) {\n      isError = false;\n      console.log(\"First name req\");\n    }\n    console.log(\"2\" + error.lastName);\n    //3rd\n    if (email.trim() === \"\") {\n      isError = true;\n      error.email = \"Required\";\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      error.email = \"Invalid email address\";\n    } else if (!isError) {\n      isError = false;\n    }\n    console.log(\"3\" + error.email);\n\n    if (isError) {\n      throw new SubmissionError(error);\n    } else {\n      //submit form\n      console.log(\"FORM OK TO BE SUBMITTED\");\n    }\n  };\n  renderField = ({ label, input, meta: { touched, error, warning } }) => (\n    <div className=\"input-row\">\n      <br />\n      <label>{label}</label>\n      <br />\n      <input {...input} type=\"text\" />\n      {touched && error && <span className=\"error\">{error}</span>}\n    </div>\n  );\n\n  render() {\n    return (\n      <form onSubmit={this.props.handleSubmit(this.submit)}>\n        <div>\n          <Field\n            name=\"firstName\"\n            label=\"First Name\"\n            component={this.renderField}\n            type=\"text\"\n          />\n        </div>\n        <div>\n          <Field\n            name=\"lastName\"\n            label=\"Second Name\"\n            component={this.renderField}\n            type=\"text\"\n          />\n        </div>\n        <div>\n          <Field\n            name=\"email\"\n            label=\"Email\"\n            component={this.renderField}\n            type=\"email\"\n          />\n        </div>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    );\n  }\n}\n\nReduxSignUpForm = reduxForm({\n  form: \"contact\"\n})(ReduxSignUpForm);\n\nexport default ReduxSignUpForm;\n","import React, { Component } from \"react\";\nimport {\n  withFormik,\n  Formik,\n  ErrorMessage,\n  FormikProps,\n  Form,\n  Field\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\n\nconst SignupSchema = Yup.object().shape({\n  userName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(70, \"Too Long!\")\n    .required(\"Required\"),\n  email: Yup.string().required(\"Required\"),\n  password: Yup.string()\n    .min(6, \"Too Short!\")\n    .required(\"Required\"),\n  companyName: Yup.string().required(\"Required\")\n});\n\nexport default class FormicForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const cors = require(\"cors\");\n    console.log(\"Inside componentDidMount\");\n    console.log(\"Fetching data in componentDidMount\");\n\n    /*    console.log(\"1st data\");\n    fetch(\"/api/v1/register\", {\n      mode: \"cors\",\n      headers: {\n        ContentType: \"application/xml\"\n      },\n      method: \"post\",\n      body: { name: \"talha\" }\n    })\n      .then(response => {\n        console.log(\"Response\");\n        console.log(response);\n        return JSON.stringify(response);\n      })\n      .then(data => {\n        console.log(\"Data\");\n        console.log(data);\n      });\n   \n\n    console.log(\"2nd data\");\n    axios\n      .post(\"/api/v1/register\")\n      .then(response => {\n        console.log(\"Response 2\");\n        console.log(response);\n        return JSON.stringify(response);\n      })\n      .then(data => {\n        console.log(\"Data 2\");\n        console.log(data);\n      });\n */\n    var ss = \"Missing RapidAPI application key. Go to https://docs.rapidapi.com/docs/keys to learn how to get your API application key.\";\n    console.log(\"Length: \" + ss.length);\n    console.log(\"3rd data\");\n    var data = {\n      key1: \"val1\",\n      key2: \"val2\"\n    };\n    axios\n      .post(\n        \"https://mikerlynn-text-tone-v1.p.rapidapi.com/api/sentiment/v1\",\n    \n        {\n          headers: {\n            \"x-rapidapi-host\": \"mikerlynn-text-tone-v1.p.rapidapi.com\",\n            \"x-rapidapi-key\":\n              \"93c5b6f5f0msh37248c74e76a5eap137360jsndfd4ea31dc3a\",\n            \"content-type\": \"application/json\",\n            accept: \"application/json\"\n          }\n        }\n      )\n      .then(response => {\n        console.log(\"Response 3\");\n        console.log(response);\n        return JSON.stringify(response);\n      })\n      .then(data => {\n        console.log(\"Data 3\");\n        console.log(data);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <br></br>\n        <br></br>\n        <br></br>\n        {/** \n    Formik Form\n    */}\n        <h1> Registration Formic Class</h1>\n        <br></br>\n        <br></br>\n        <Formik\n          initialValues={{\n            password: \"\",\n            companyName: \"\",\n            email: \"\",\n            userName: \"\"\n          }}\n          validationSchema={SignupSchema}\n          onSubmit={(values, actions) => {\n            console.log(\"Inside submit click\");\n            setTimeout(() => {\n              //  alert(\"Your Input: \" + JSON.stringify(values, null, 2));\n              console.log(JSON.stringify(values, null, 2));\n              actions.setSubmitting(false);\n            }, 1000);\n          }}\n          render={props => (\n            <Form onSubmit={props.handleSubmit}>\n              <h4>Username</h4>\n              <Field\n                name=\"userName\"\n                type=\"text\"\n                placeholder=\"Enter Your Username\"\n                onBlur={props.handleBlur}\n              />\n              <ErrorMessage name=\"userName\" />\n              <br></br>\n              <h4>Email</h4>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                placeholder=\"Enter Your Email\"\n                onBlur={props.handleBlur}\n              />\n              <ErrorMessage name=\"email\" />\n              <br></br>\n              <h4>Password</h4>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter Your Password\"\n                onBlur={props.handleBlur}\n              />\n              <ErrorMessage name=\"password\" />\n              <h4>Company Name</h4>\n              <Field\n                name=\"companyName\"\n                type=\"text\"\n                placeholder=\"Enter Your Company\"\n                onBlur={props.handleBlur}\n              />\n              <ErrorMessage name=\"companyName\" />\n              <br></br>\n              <br></br>\n              <br></br>\n              <button type=\"submit\">Register Now</button>\n              <br></br>\n              <br></br>\n              <br></br>\n              <br></br>\n            </Form>\n          )}\n        />\n      </div>\n    );\n  }\n}\n","import store2 from \"../index\";\n\nexport const anotherName = name => {\n  //The below return only perform an action and no redux thunk is utitlized\n  //    return { type: \"Change_Name\", payload: name };\n  //DOING FETCH WITHOUT ASYNC AWAIT\n  /*\n  return dispatch => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(resp => resp.json())\n      .then(resp2 => {\n        dispatch({ type: \"Change_Name\", payload: resp2[0].name });\n      });\n  };\n    */\n\n  //DOING FETCH WITH ASYNC AWAIT\n  return async dispatch => {\n    const resp = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const resp2 = await resp.json();\n    dispatch({ type: \"Change_Name\", payload: resp2[0].name });\n  };\n};\n\n//WHEN AN ACTION IS DIPATCHED,\n//BOTH THE REDUCERS ARE RUN..\nexport const addAWish = () => {\n  return async dispatch => {\n    const resp = await postData(\n      \"http://192.168.100.4:8080/api/v1/projects/Project_1/flags\",\n      {\n        jwtToken:\n          \"eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYWhhaXpoYXJAeWFob28uY29tIiwiZXhwIjoxNTY5NTAwNDkxLCJpYXQiOjE1Njk0ODI0OTF9.vVPTOSTxPHDSN3nzoXgrEvkagvR2J9wCSByvb2CRIoyT4tKMtNDj0aGpst1aeXuOCwHpY8bj_r5qprpE1d7G3Q\"\n      }\n    );\n    const resp2 = await JSON.stringify(resp);\n    console.log(\"Response on add wish on : \" + JSON.stringify(resp, null, 4));\n    console.log(\"Response on add wish on : \" + JSON.stringify(resp2, null, 4));\n    dispatch({ type: \"ADD_WISH\", payload: \"Internet Surfing\" });\n  };\n};\n\nasync function postData(url = \"\", data = {}) {\n  // Default options are marked with *\n\n  //prev token\n  //eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtYWhhaXpoYXJAeWFob28uY29tIiwiZXhwIjoxNTY5NTAwNDkxLCJpYXQiOjE1Njk0ODI0OTF9.vVPTOSTxPHDSN3nzoXgrEvkagvR2J9wCSByvb2CRIoyT4tKMtNDj0aGpst1aeXuOCwHpY8bj_r5qprpE1d7G3Q\n  const response = await fetch(url, {\n    method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n    mode: \"cors\", // no-cors, *cors, same-origin\n    cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: \"same-origin\", // include, *same-origin, omit\n    headers: {\n      Authorization:\n        \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ0c2hhaGFiQGNyb3ZhdGVvZmZzaG9yZS5jb20iLCJleHAiOjE1Njk1MDU3NDgsImlhdCI6MTU2OTQ4Nzc0OH0.hR_CHxVPDarV6Vf4iL_Ar4juuVETzTHAUvTYRmFUqfucB4MRLKo-VOGZyOsVoRzt27lsAtPbZXd0tZMJlPog_g\",\n      \"Content-Type\": \"application/json\"\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: \"follow\", // manual, *follow, error\n    referrer: \"no-referrer\", // no-referrer, *client\n    body: JSON.stringify({\n      key: \"new-gallery\",\n      name: \"New Gallery\",\n      description: \"feature flag 1\",\n      flagType: \"BOOLEAN\",\n      variations: [\n        {\n          key: \"v1\",\n          name: \"control\",\n          description: \"variation 1\"\n        },\n        {\n          key: \"v2\",\n          name: \"treatment\",\n          description: \"variation 2\"\n        }\n      ]\n    }) // body data type must match \"Content-Type\" header\n  });\n  return await response.json(); // parses JSON response into native JavaScript objects\n}\n\nexport const ChangeInputBoxValue = event => {\n  return dispatch => {\n    dispatch({ type: \"CHANGE_INPUTBOX\", payload: event.target.value });\n  };\n};\n","import React from \"react\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport UserList from \"../containers/usersList\";\nimport UserDetails from \"../containers/userDetails\";\nimport { UpdateInputState } from \"../action\";\nimport ReduxSignUpForm from \"./ReduxForm\";\nimport FormicForm from \"./FormicFormClassComponent\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  anotherName,\n  addAWish,\n  ChangeInputBoxValue\n} from \"../action/actionPractice\";\nimport { Input } from \"reactstrap\";\n//hr is a horizontal row\nclass ReduxApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { personName: \"\", personWish: \"\" };\n    this.onFormSubmitMark = this.onFormSubmitMark.bind(this);\n    this.myAllwishes = this.myAllwishes.bind(this);\n  }\n\n  myAllwishes = () => {};\n\n  onFormSubmitMark = e => {\n    e.preventDefault();\n  };\n\n  onChange = e => {\n    this.setState({ personName: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n  };\n  //IF WE USE SEPARATE ACTIONS FOR EACH, BUT EACH ACTION DOES THE SAME TASK\n  //IF WE USE SEPARATE REDUCERS, RETURN ALWAYS THE RECENT DATA AND MAKING THE OBJECT\n\n  render() {\n    console.log(\"Props: \" + JSON.stringify(this.props, null, 4));\n    // console.log(\"Input vals: \" + JSON.stringify(this.props.Input.na, null, 4));\n\n    return (\n      <div>\n        <h1>Redux Practice App</h1>\n        <p>Got Data from Redux: {this.props.myname}</p>\n        <h1>My Wishes List:</h1>\n        {this.props.mywish.map((item, idx) => {\n          return (\n            <div>\n              <p key={Math.random()}>{item}</p>\n            </div>\n          );\n        })}\n        <form onSubmit={this.handleSubmit}>\n          <Input\n            name=\"personName\"\n            value={this.props.changedInput1Value}\n            onChange={this.props.ChangeInputBox1}\n            placeholder=\"Enter Person Name\"\n          />\n          <Input name=\"personWish\" placeholder=\"Enter Person Wish\" />\n          <Button\n            onClick={() => {\n              this.props.changeName(\"Shahab\");\n            }}\n          >\n            Change Name [Name Reducer]\n          </Button>\n          <br></br>\n          <br></br>\n          <Button\n            onClick={() => {\n              this.props.addWish();\n            }}\n          >\n            Add a Wish [Wish Reducer]\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  //receives state of all reducer as it is rendered inside a provider\n  //that has store attCHED\n  console.log(\n    \"Now State of Store [inside App.js] : \" + JSON.stringify(state, null, 4)\n  );\n\n  //it returns an object - name and wish object\n  //are same as provided to combine reducer\n  return {\n    myname: state.name,\n    mywish: state.wish,\n    changedInput1Value: state.inputBoxChanger\n  };\n};\n\n//hum render me prop se aik method use karne wale hein.\n//and ye method is function se props me add ho jaega\nconst mapDispatchToProps = dispatch => {\n  //it returns an object\n  return {\n    changeName: name => {\n      dispatch(anotherName(name));\n    },\n    addWish: () => {\n      dispatch(addAWish());\n    },\n    ChangeInputBox1: event => {\n      dispatch(ChangeInputBoxValue(event));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ReduxApp);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass home extends Component {\n  constructor(props) {\n    super(props);\n\n    /*setting initial states*/\n    this.state = {\n      currentUserName: this.props.username,\n      currentEmail: this.props.email\n    };\n\n    /* Setting states that came from props */\n    this.setState({});\n\n    /*binding objects functions for events*/\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Home Page</h1>\n\n        <label>\n          UserName: {this.state.currentUserName}\n          <br></br>\n          Email: {this.state.currentEmail}\n          <br></br>\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default home;\n","import React, { Component } from \"react\";\n\nclass Errors404 extends Component {\n  constructor(props) {\n    super(props);\n\n    /*setting initial states*/\n    this.state = { currentEmail: \"\", currentUserName: \"\" };\n\n    /*binding objects functions for events*/\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>ERROR 404: Sign in to access home page</h1>\n      </div>\n    );\n  }\n}\n\nexport default Errors404;\n","import React, { Component } from \"react\";\nimport Home from \"./home\";\nimport Errors404 from \"./errors404\";\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n\n    /*setting initial states*/\n    this.state = {\n      email: \"\",\n      pass: \"\",\n      submitPossible: false,\n      authPossible: false,\n      validationChecks: false,\n      existingName: \"Talha\",\n      existingEmail: \"1@1.com\",\n      existingPass: \"123456\",\n      loggedIn: false,\n      submitClicked: false\n    };\n\n    /*binding objects functions for events*/\n    this.handleEmailChange = this.handleEmailChange.bind(this);\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.checkFormSubmissionAllowed = this.checkFormSubmissionAllowed.bind(\n      this\n    );\n    this.checkFormSubmissionValidation = this.checkFormSubmissionValidation.bind(\n      this\n    );\n    this.checkFormSubmissionAuthentication = this.checkFormSubmissionAuthentication.bind(\n      this\n    );\n  }\n\n  /* An email gets set as soon as user brings it up */\n  handleEmailChange(event) {\n    this.setState({ email: event.target.value });\n    console.log(\"Changing Email\");\n    console.log(\"EMAIL Changed to: \" + event.target.value);\n  }\n\n  /* A password gets set as soon as user brings it up */\n  handlePasswordChange(event) {\n    this.setState({ pass: event.target.value });\n    console.log(\"Changing Password\");\n    console.log(\"Password Changed to: \" + event.target.value);\n  }\n\n  /* 3 checks */\n  checkFormSubmissionAllowed() {\n    console.log(\"Checking if EMAIL AND PASSWORD FIELD are EMPTY [ALLOWED?]\");\n    if (this.state.email === \"\" || this.state.pass === \"\") {\n      return false;\n    } else if (this.state.email !== \"\" && this.state.pass !== \"\") {\n      return true;\n    }\n  }\n\n  checkFormSubmissionValidation() {\n    console.log(\"Check Validation [Format?]\");\n    return true;\n  }\n\n  checkFormSubmissionAuthentication() {\n    console.log(\"Check User Authentication [Legal User?]\");\n    if (\n      this.state.email === this.state.existingEmail &&\n      this.state.pass === this.state.existingPass\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /* \n      Conditions are return by other 3 check functions\n      this fuction sets state, waits for setting state and dom synchroniziation with virutal dom,\n      calls the callBack arrow function which then stops the loading[for the time being, using a loading spinner\n      wont be a bad idea]  and allows user to authenticate/move to next page and displays pop up message of logged in\n\n      1- Checks if all true by other 3 function returns\n      2- SetState and wait\n      3- Logs in\n\n      The final condition of this function is always a logged in user!\n\n      NEVER CHECK A CONDITION AGAINST STATES\n      NIETHER PRINT A STATE IN CONSOLE TO CHECK IF IT IS TRUE OR NOT\n\n      ONLY CHECK AFTER A CALL BACK FUNTION ON SETTING STATES\n\n  */\n\n  stateSettingAndLoggingInFunction() {\n    this.setState(\n      {\n        submitPossible: true,\n        validationChecks: true,\n        authPossible: true\n      },\n      () => {\n        console.log(\" All States Set - USER LOGGED IN \");\n        /* Alert logged */\n        alert(\n          \"Email: \" +\n            this.state.email +\n            \"\\n\" +\n            \"Password: \" +\n            this.state.pass +\n            \"\\n\" +\n            \"Authentication Success\" +\n            \"\\n\"\n        );\n\n        /* Now set login to true to navigate to home screen */\n        this.setState({\n          loggedIn: true,\n          submitClicked: true\n        });\n      }\n    );\n  }\n\n  handleSubmit(event) {\n    console.log(\n      \"----------------------------------------------------------------\"\n    );\n    console.log(\"Submit clicked\");\n    console.log(\"\\n\\nNow Checking...\\n\\n\");\n    /*RUNNING ALL CHECKS*/\n    if (\n      this.checkFormSubmissionAllowed() &&\n      this.checkFormSubmissionValidation() &&\n      this.checkFormSubmissionAuthentication()\n    ) {\n      console.log(\"Now setting states and waiting [SHOW SPINNER LOAD]..\");\n      this.stateSettingAndLoggingInFunction();\n    } else {\n      /* Not logged in debug */\n      console.log(\n        \"\\nUnable to log in - REASON PRINTED BELOW \\n\\nAllowed:\" +\n          this.checkFormSubmissionAllowed() +\n          \" \\nFormat[ALWAYS TRUE]:\" +\n          this.checkFormSubmissionValidation() +\n          \" \\nAuth:\" +\n          this.checkFormSubmissionAuthentication() +\n          \" \\n\\nemailGiven:\" +\n          this.state.email +\n          \" emailDB:\" +\n          this.state.existingEmail +\n          \" \\npassGiven:\" +\n          this.state.pass +\n          \" passDB:\" +\n          this.state.existingPass +\n          \"\\n\"\n      );\n\n      /* Set submit click to true AS IN BOTH CASES */\n      this.setState({ submitClicked: true });\n\n      console.log(\"CHECKING AGAIN WHERE THE ERROR OCCURED...\\n\\n\");\n      //FEEDBACK TO USER\n      if (!this.checkFormSubmissionAllowed()) {\n        alert(\"Please Fill All The Boxes Before Clicking Submit\");\n      } else if (!this.checkFormSubmissionValidation()) {\n        alert(\"Email Format is incorrect\");\n      } else if (!this.checkFormSubmissionAuthentication()) {\n        /* Alert not logged */\n        alert(\n          \"Email: \" +\n            this.state.email +\n            \"\\n\" +\n            \"Password: \" +\n            this.state.pass +\n            \"\\n\" +\n            \"Authentication Failed\" +\n            \"\\n\"\n        );\n      }\n      console.log(\"\\n\\n===============SUBMIT ENDS================n\\n\");\n    }\n\n    /* Dont Reload page, maintain state */\n    event.preventDefault();\n  }\n\n  conditionalRenderer() {}\n\n  render() {\n    return (\n      <div>\n        {!this.state.loggedIn && !this.state.submitClicked && (\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              Email:\n              <input\n                type=\"email\"\n                name=\"email\"\n                onChange={this.handleEmailChange}\n              />\n            </label>\n\n            <label>\n              Password:\n              <input\n                type=\"password\"\n                name=\"pass\"\n                onChange={this.handlePasswordChange}\n              />\n            </label>\n\n            <input type=\"submit\" value=\"Login\" />\n\n            <br></br>\n            <label>Login Status: {this.state.loggedIn}</label>\n          </form>\n        )}\n        {this.state.loggedIn && this.state.submitClicked && (\n          <Home\n            username={this.state.existingName}\n            email={this.state.existingEmail}\n          />\n        )}\n        {!this.state.loggedIn && this.state.submitClicked && <Errors404 />}\n      </div>\n    );\n  }\n}\n\n//myform = () => {};\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport Switch from \"react-switch\";\nimport Autosuggest from \"react-autosuggest\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Input,\n    Dropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n} from \"reactstrap\";\n\nimport {\n    withFormik,\n    Formik,\n    ErrorMessage,\n    FormikProps,\n    Form,\n    Field,\n    FieldArray\n} from \"formik\";\nimport * as Yup from \"yup\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\n\nconst FeatureCreateSchema = Yup.object().shape({\n    featureName: Yup.string()\n        .min(2, \"Too Short!\")\n        .max(70, \"Too Long!\")\n        .required(\"Required\"),\n    featureKey: Yup.string()\n        .required(\"Required\")\n        .min(2, \"Too Short!\")\n        .max(70, \"Too Long!\"),\n    featureDesc: Yup.string()\n        .min(6, \"Too Short!\")\n        .required(\"Required\"),\n    variationArray: Yup.array().of(\n        Yup.object().shape({\n            variationName: Yup.number().required(),\n            variationKey: Yup.string().required(),\n            variationDesc: Yup.string().required()\n        })\n    ),\n    friends: Yup.array()\n        .of(\n            Yup.object().shape({\n                name: Yup.string()\n                    .min(4, \"too short\")\n                    .required(\"Required\"), // these constraints take precedence\n                salary: Yup.string()\n                    .min(3, \"cmon\")\n                    .required(\"Required\") // these constraints take precedence\n            })\n        )\n        .required(\"Must have friends\") // these constraints are shown if and only if inner constraints are satisfied\n        .min(3, \"Minimum of 3 friends\")\n});\n\n/* ARRAY OF OBJECTS FOR SEARCHING A FEATURES - AUTO-SUGGESTION */\nvar featuresList = new Array(\n    {\n        name: \"Feature 1\",\n        description: \"National University\"\n    },\n    {\n        name: \"Feature 2\",\n        description: \"Aeroplane parts 2\"\n    },\n    {\n        name: \"Feature 3\",\n        description: \"Uber\"\n    },\n    {\n        name: \"Feature 4\",\n        description: \"Careem\"\n    },\n    {\n        name: \"Feature 7\",\n        description: \"BONUT\"\n    },\n    {\n        name: \"Feature 10\",\n        description: \"Car axle\"\n    },\n    {\n        name: \"Feature 12\",\n        description: \"AMAZING\"\n    }\n);\n\nasync function postData(url = \"\", data = {}) {\n    // Default options are marked with *\n   const response = await fetch(url, {\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n        mode: \"cors\", // no-cors, *cors, same-origin\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: \"same-origin\", // include, *same-origin, omit\n        headers: {\n            Authorization:\n                \"Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ3YWxlZWRraGFuLndrOTc2QGdtYWlsLmNvbSIsImV4cCI6MTU2OTUxNDk1OCwiaWF0IjoxNTY5NDk2OTU4fQ.ffqocveVghznttuz1dZFEAj3mtshkd0hUTFmfGKqx2HIbJsyfGvcIFFz3sb2vwO8h8KHujBiJOHKhlPeP9geGA\",\n            \"Content-Type\": \"application/json\"\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        redirect: \"follow\", // manual, *follow, error\n        referrer: \"no-referrer\", // no-referrer, *client\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return await response.json(); // parses JSON response into native JavaScript objects\n}\n\n/** THE BASIC FILTERATION OF SUGGESTION IS DONE HERE - AUTO - SUGGESTION */\nconst getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    /* If its an empty string so return empty array \n       that wont render else put a filter */\n    return inputLength === 0\n        ? []\n        : featuresList.filter(\n            specificFeature =>\n                specificFeature.name.toLowerCase().slice(0, inputLength) ===\n                inputValue\n        );\n};\n\n//RETURNS WHATEVER IS TO BE INSERTED IN THE SEARCH TEXT BOX,\n//AFTER CLICKING ON ONE OF THE OPTIONS AS CHOSING - AUTO-SUGGESTION\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n//HOW IT SHOWS/RENDERS THE LIST CALLED featureList IN DROP DOWN - AUTO-SUGGESTION\nconst renderSuggestion = suggestion => (\n    <div>\n        <h5>{suggestion.name}</h5>\n        <p>{suggestion.description}</p>\n    </div>\n);\n\nclass MyForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            featureItem: [\n                {\n                    key: \"\",\n                    featureNo: \"Feature 1\",\n                    description: \"Description of the Feature\",\n                    switchOn: false,\n                    Variation: [\n                        {\n                            variationNo: 0,\n                            variationName: \"Variation Name\",\n                            key: \"key of the Variation\",\n                            description: \"Description of the Variation\"\n                        }\n                    ]\n                }\n            ],\n            TemporaryVariations: [\n                {\n                    variationNo: 0,\n                    variationName: \"\",\n                    key: \"\",\n                    description: \"\"\n                }\n            ],\n            temp_featurename: \"\",\n            temp_featurekey: \"\",\n            temp_featuredesc: \"\",\n            temp_featureboolean: \"\",\n            temp_bool_on_true: false,\n            temp_bool_off_true: true,\n            dropdownOpen: false,\n            //max index reached by a variation\n            currentTempVarIDX: 0,\n            searchedFeatureIndexes: [],\n            searchText: \"\",\n            renderSearch: false,\n            //MAX ID REACHED IS A TOTALLY JUSTIFIED VARIABLE,\n            //SINCE IT SHOULD BE OUTSIDE OF THE BOX\n            //THE ID(s) in an array are automaically mapped as indexes\n            //so we never needed an id variable inside the featureItem array's object.\n            //EVERY FEATURE IS MAPPED TO AN INDEX ie an id automatically.\n            //SO its a waste of storage and slows the app based on N number of maxId reached\n            //for each array index. since it should have a single counter variable,\n            //not N variable for N items of dynamic array\n            maxIDreached: 1,\n            /* Auto Suggestion */\n            suggestions: [],\n            modal: false\n        };\n\n        /* function binding */\n        this.handleSwitchChange = this.handleSwitchChange.bind(this);\n        this.SearchNow = this.SearchNow.bind(this);\n        this.addFeature = this.addFeature.bind(this);\n        this.searchTheArray = this.searchTheArray.bind(this);\n        this.onFormSubmitMark = this.onFormSubmitMark.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.tempvarvalueOnChange = this.tempvarvalueOnChange.bind(this);\n        this.tempkeyvalueOnChange = this.tempkeyvalueOnChange.bind(this);\n        this.tempdescvalueOnChange = this.tempdescvalueOnChange.bind(this);\n        this.addVariation = this.addVariation.bind(this);\n        this.featureNameChange = this.featureNameChange.bind(this);\n        this.featureKeyChange = this.featureKeyChange.bind(this);\n        this.featureDescChange = this.featureDescChange.bind(this);\n        this.featureBooleanChange = this.featureBooleanChange.bind(this);\n        this.toggleForDropDown = this.toggleForDropDown.bind(this);\n    }\n\n    tempvarvalueOnChange(idx) {\n        this.state.TemporaryVariations[idx].variationName =\n            window.event.target.value;\n        this.forceUpdate();\n    }\n    tempkeyvalueOnChange(idx) {\n        this.state.TemporaryVariations[idx].key = window.event.target.value;\n        this.forceUpdate();\n    }\n    tempdescvalueOnChange(idx) {\n        this.state.TemporaryVariations[idx].description = window.event.target.value;\n        this.forceUpdate();\n    }\n\n    //TOGGLE IS A FUNCTION THAT SHOWS A NEW Window and hides it\n    toggle() {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n// Autosuggest will call this function every time you need to update suggestions.\n    // You already implemented this logic above, so just use it. - AUTO-SUGGESTION\n    onSuggestionsFetchRequested = ({ value }) => {\n        this.setState({\n            suggestions: getSuggestions(value)\n        });\n    };\n\n    // Autosuggest will call this function every time you need to clear suggestions.\n    // - AUTO-SUGGESTION\n    onSuggestionsClearRequested = () => {\n        this.setState({\n            suggestions: []\n        });\n    };\n\n    /* 5 functions */\n\n    //switch toggle\n    handleSwitchChange = (idx, checked) => {\n        console.log(\"\\n\\n\");\n        console.log(\"Handle switch change at id: \" + idx);\n        console.log(\"previous state: \" + checked);\n\n        let featureItem = [...this.state.featureItem];\n        featureItem[idx][\"switchOn\"] = !checked;\n        this.setState({ featureItem }, () => {\n            console.log(\"SWITCH VALUE CHANGE: \" + !checked);\n            console.log(\"\\n\\n\");\n        });\n    };\n\n    toggleForDropDown() {\n        this.setState(prevState => ({\n            dropdownOpen: !prevState.dropdownOpen\n        }));\n    }\n\n    //switch toggle\n    handleVariationChange = (idx, checked) => {\n        console.log(\"\\n\\n\");\n        console.log(\"Handle variation change at id: \" + idx);\n        console.log(\"previous state: \" + checked);\n\n        let variationItem = [...this.state.variationItem];\n        variationItem[idx][\"switchOn\"] = !checked;\n        this.setState({ variationItem }, () => {\n            console.log(\"SWITCH VALUE CHANGE: \" + !checked);\n            console.log(\"\\n\\n\");\n        });\n    };\n\n    //data in search text change\n    onChange = (event, { newValue }) => {\n        console.log(\"\\n\\n\");\n\n        this.setState(\n            {\n                searchText: newValue.toUpperCase()\n            },\n            e => {\n                //CONDITION TO MAKE RENDER SEARCH false\n                if (this.state.searchText === \"\") {\n                    this.setState({ renderSearch: false });\n                }\n\n                //Refined array by searching - backend\n                this.searchTheArray();\n\n                console.log(\"\\n\\n\");\n            }\n        );\n    };\n\n    //function called when a new component is added as well as when onChange takes place\n    searchTheArray() {\n        console.log(\"Search array worked\");\n        console.log(\"Initializing search array to null for a new search query\");\n        this.setState({ searchedFeatureIndexes: [] }, () => {\n            console.log(\"Search Array [] is: \" + this.state.searchedFeatureIndexes);\n            console.log(\"SEARCHING AND ITERATING INDEXES\");\n            this.state.featureItem.map((val, idx) => {\n                if (\n                    this.state.featureItem[idx].featureNo\n                        .toUpperCase()\n                        .startsWith(this.state.searchText) &&\n                    this.state.searchText != \"\"\n                ) {\n                    this.state.searchedFeatureIndexes.push(idx);\n                    //LETTING AS A STATE\n                    let searchedFeatureIndexes = [...this.state.searchedFeatureIndexes];\n                    this.setState({ searchedFeatureIndexes }, () => {\n                        console.log(\n                            \"\\nINDEX ADDED FOR SEARCH: \" +\n                            this.state.searchText +\n                            \" which is located at index: \" +\n                            idx\n                        );\n                    });\n                } else {\n                    console.log(\"INDEX <NOT> ADDED FOR SEARCH: \" + idx);\n                }\n                console.log(\n                    \"Search Array on LOOP: \" + this.state.searchedFeatureIndexes\n                );\n            });\n            console.log(\n                \"\\n\\nFINAL Search Array: \" + this.state.searchedFeatureIndexes\n            );\n        });\n    }\n\n    //Search button click - Makes renderSearch True\n    SearchNow = e => {\n        console.log(\"\\n\\n\");\n        console.log(\"SEARCH CLICKED\");\n        if (this.state.searchText === \"\") {\n            console.log(\"SEARCH BOX EMPTY\");\n            this.setState({ renderSearch: false });\n        } else {\n            console.log(\"SEARCH BOX NOT EMPTY, WE CAN SEARCH\");\n            console.log(\"Search Text: \" + this.state.searchText);\n            //RENDER ACCORDING TO SEARCH TEXT\n            this.setState({ renderSearch: true }, () => {\n                console.log(\"RENDERING ACCORDING TO SEARCH TEXT\");\n                this.searchTheArray();\n                console.log(\"SEARCH ENDED\");\n                console.log(\"\\n\\n\");\n            });\n        }\n        e.preventDefault();\n    };\n\n    //works to update the recommendation features added up till now\n    updateRecommender() {\n        var lastFeatureIndex = this.state.featureItem.length - 1;\n        var name = this.state.featureItem[lastFeatureIndex].featureNo;\n        var description = this.state.featureItem[lastFeatureIndex].description;\n        var obj = { name, description };\n        featuresList.push(obj);\n    }\n\n    //adds a new feature\n    addFeature = () => {\n        console.log(\"\\n\\n\");\n        console.log(\"Feature ADDED\");\n        //ON the backend, the feature are starting from index 0 and onwards,\n        //ON the frontend, the feature are starting from index 1 and onwards,\n        this.setState(\n            prevState => ({\n                featureItem: [\n                    ...prevState.featureItem,\n                    {\n                        key: \"Key - \" + this.state.temp_featurekey,\n                        featureNo:\n                            \"Feature \" +\n                            (this.state.maxIDreached + 1) +\n                            \" - \" +\n                            this.state.temp_featurename,\n                        description: \"Description - \" + this.state.temp_featuredesc,\n                        switchOn: false,\n                        Variation: this.state.TemporaryVariations\n                    }\n                ]\n            }),\n            async () => {\n                console.log(\n                    \"Feature object on New Add: \" +\n                    JSON.stringify(this.state.featureItem, null, 4)\n                );\n\n                //updates the recommended searching box by adding 1 feature at the bottom\n                this.updateRecommender();\n\n                //create object in Server's DB\n                console.log(\"INITIALIZE OBJ TO SEND TO SERVER\");\n                const userData = {\n                    key: \"Key - \" + this.state.temp_featurekey,\n                    name:\n                        \"Feature \" +\n                        (this.state.maxIDreached + 1) +\n                        \" - \" +\n                        this.state.temp_featurename,\n                    description: \"Description - \" + this.state.temp_featuredesc,\n                    flagType: this.state.temp_featureboolean,\n                    variations: this.state.TemporaryVariations\n                };\n                //reponse -\n                console.log(\"FETCHING DATA FROM DATABASE\");\n\n                const resp = await postData(\n                    \"http://192.168.100.140:8080/api/v1/projects/pjt17/flags\",\n                    userData\n                );\n\n                if (resp.status.code == 500) {\n                    console.log(\n                        \"DATA TO DB: Unique key constraint: Duplicate key for projects being added!. Please change the key provided\"\n                    );\n                    alert(\"DUPLICATE DATA! PLEASE CHANGE FLAG KEY PROVIDED\");\n                } else {\n                    console.log(\n                        \"DATA TO DB: Response on Data Fetch [Waleed's Data] : \" +\n                        JSON.stringify(resp, null, 4)\n                    );\n                    alert(\"FLAG INSERTED TO DATABASE\");\n                }\n            } \n        );\n\n        //Initialize to initial for new temp object\n        this.setState({\n            TemporaryVariations: [\n                {\n                    variationName: \"Variation Name\",\n                    variationNo: 0,\n                    key: \"key of the Variation\",\n                    description: \"Description of the Variation\"\n                }\n            ]\n        });\n\n        //new feature has been added to array\n        //now again apply search criteria to match all feature items that\n        //exist within the array with the current UI/VIEW - RUNS searchTheArray function\n        this.searchTheArray();\n        //increment counter of max number of features reached by 1.\n        this.setState({ maxIDreached: this.state.maxIDreached + 1 }, () => {\n            console.log(\"Max Feature reached: \" + this.state.maxIDreached + \"\\n\\n\");\n        });\n\n        this.toggle();\n    };\n\n    addVariation = () => {\n        console.log(\"\\n\\n\");\n        console.log(\"Temporary Variations ADDED\");\n\n        //ON the backend, the feature are starting from index 0 and onwards,\n        //ON the frontend, the feature are starting from index 1 and onwards,\n        this.setState(prevState => ({\n            TemporaryVariations: [\n                ...prevState.TemporaryVariations,\n                {\n                    variationName: \"\",\n                    variationNo: this.state.currentTempVarIDX,\n                    key: \"\",\n                    description: \"\"\n                }\n            ]\n        }));\n        this.state.currentTempVarIDX = this.state.currentTempVarIDX + 1;\n        this.forceUpdate();\n        console.log(\"\\n\\n\");\n    };\n    //prevents loading when enter pressed randomly by the user\n    //even without doing anything\n    onFormSubmitMark = e => {\n        e.preventDefault();\n    };\n\n    featureNameChange(props) {\n        props.setFieldValue(\"featureName\", window.event.target.value);\n        this.state.temp_featurename = window.event.target.value;\n        this.forceUpdate();\n    }\n    featureKeyChange(props) {\n        props.setFieldValue(\"featureKey\", window.event.target.value);\n        this.state.temp_featurekey = window.event.target.value;\n        this.forceUpdate();\n    }\n    featureDescChange(props) {\n        props.setFieldValue(\"featureDesc\", window.event.target.value);\n        this.state.temp_featuredesc = window.event.target.value;\n        this.forceUpdate();\n    }\n\n    featureBooleanChange(e) {\n        this.setState({ temp_featureboolean: e.currentTarget.textContent }, () => {\n            console.log(\"BOOLEAN Switch to: \" + this.state.temp_featureboolean);\n            if (this.state.temp_featureboolean === \"ON\") {\n                this.setState({ temp_bool_on_true: true });\n                this.setState({ temp_bool_off_true: false });\n            } else if (this.state.temp_featureboolean === \"OFF\") {\n                this.setState({ temp_bool_on_true: false });\n                this.setState({ temp_bool_off_true: true });\n            }\n        });\n    }\n    render() {\n        //TAKE required states\n        //the item boxes of feautures complete object,\n        //the search box input,\n        //and the suggestions list array. It is refined later by\n        //search criteria to render the list\n        const props = this.props;\n        console.log(props);\n        let {\n            searchText,\n            featureItem,\n            suggestions,\n            TemporaryVariations\n        } = this.state;\n        //renderSearch is a state that only run if the specific value\n        //is false else maximum update depth causes an error\n        //So the first condition handles the infinite setState exception\n        //beforehand\n        if (this.state.renderSearch && this.state.searchText === \"\") {\n            this.setState({ renderSearch: false });\n        } else if (!this.state.renderSearch && this.state.searchText !== \"\") {\n            this.setState({ renderSearch: true });\n        }\n\n        //Auto-suggest will pass through all these props to the input ie\n        //all of these as additional props are added to  <Autosuggest    >\n        //tag - AUTO-SUGGESTION\n        const inputProps = {\n            name: \"searchText\",\n            placeholder: \"Find the Feature Flag\",\n            value: searchText,\n            onChange: this.onChange,\n            id: \"searchText\",\n            className: \"searchText\",\n            class: \"col-md-11\"\n        };\n\n        return (\n            <div>\n\n                <div class=\"container pt-5 pb-5\">\n                    <h1>Feature Flags</h1>\n                    <div>\n                        <p style={{ display: \"inline\" }}>\n                            Use this page to see all the Feature Flags in this project. Select\n                            a Flag to manage the environment-specific targetting and rollout\n                            rules. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;\n            </p>\n                        <Button color=\"danger\" onClick={this.toggle}>\n                            NEW+\n            </Button>{\" \"}\n                        <div>\n                            <Formik\n                                initialValues={{\n                                    featureName: \"\",\n                                    featureKey: \"\",\n                                    featureDesc: \"\",\n                                    variationArray: [\n                                       {\n                                            variationName: \"\",\n                                            variationKey: \"\",\n                                            variationDesc: \"\"\n                                        }\n                                    ],\n                                    friends: [\"jared\", \"ian\", \"brent\"]\n                                }}\n                                validationSchema={FeatureCreateSchema}\n                                onSubmit={(values, actions) => {\n                                    console.log(\"FORMIK FORM - Inside submit click\");\n                                    setTimeout(() => {\n                                        //  alert(\"Your Input: \" + JSON.stringify(values, null, 2));\n                                        console.log(\n                                            \"FORMIK FORM - \" + JSON.stringify(values, null, 2)\n                                        );\n                                        actions.setSubmitting(false);\n                                    }, 1000);\n                                }}\n                                render={({ values }) => (\n                                    <Form onSubmit={props.handleSubmit}>\n                                        <h1>Field Array</h1>\n                                        <FieldArray\n                                            name=\"friends\"\n                                            render={arrayHelpers => (\n                                                <div>\n                                                    {values.friends.map((friend, index) => (\n                                                        <div key={index}>\n                                                            <Field name={`friends[${index}].name`} />\n                                                            <Field name={`friends.${index}.age`} /> // both\n                                                            these conventions do the same\n                              <button\n                                                                type=\"button\"\n                                                                onClick={() => arrayHelpers.remove(index)}\n                                                            >\n                                                                -\n                              </button>\n                                                        </div>\n                                                    ))}\n                                                    <button\n                                                        type=\"button\"\n                                                        onClick={() =>\n                                                            arrayHelpers.push({ name: \"\", age: \"\" })\n                                                        }\n                                                    >\n                                                        +\n                          </button>\n                                                </div>\n                                            )}\n                                        />\n                                        <h1>End Field Array</h1>\n                                        <Modal\n                                            centered\n                                            aria-hidden=\"true\"\n                                            class=\"modal fade\"\n                                            isOpen={this.state.modal}\n                                            toggle={this.toggle}\n                                            className={this.props.className}\n                                        >\n                                            <ModalHeader toggle={this.toggle}>\n                                                Create Feature Flag\n                                            </ModalHeader>\n                                            <ModalBody>\n                                                <label>Name</label>\n                                                <br></br>\n                                                <Field\n                                                    name=\"featureName\"\n                                                    type=\"text\"\n                                                    placeholder=\"Enter Feature Name\"\n                                                    onBlur={props.handleBlur}\n                                                    style={{ width: 350 }}\n                                                    onChange={() => this.featureNameChange(props)}\n                                                />\n                                                <ErrorMessage name=\"featureName\" />\n                                                <br />\n                                                <label>Key</label>\n                                                <br></br>\n                                                <Field\n                                                    name=\"featureKey\"\n                                                    type=\"text\"\n                                                    placeholder=\"Enter key for flag\"\n                                                    onBlur={props.handleBlur}\n                                                    style={{ width: 350 }}\n                                                    onChange={() => this.featureKeyChange(props)}\n                                                />\n                                                <ErrorMessage name=\"featureKey\" />\n                                                <br />\n                                                <label>Descriptions</label>\n                                                <br></br>\n                                                <Field\n                                                    name=\"featureDesc\"\n                                                    type=\"text\"\n                                                    placeholder=\"Enter description\"\n                                                    onBlur={props.handleBlur}\n                                                    style={{ width: 350 }}\n                                                    onChange={() => this.featureDescChange(props)}\n                                                />\n                                                <ErrorMessage name=\"featureDesc\" />\n                                                <br />\n                                                <label>Variations</label>\n                                                <Dropdown\n                                                    isOpen={this.state.dropdownOpen}\n                                                    toggle={this.toggleForDropDown}\n                                                >\n                                                    <DropdownToggle caret>\n                                                        BOOLEAN{\" \"}\n                                                        {this.state.temp_featureboolean === \"\"\n                                                            ? \"...\"\n                                                            : this.state.temp_featureboolean}\n                                                    </DropdownToggle>\n                                                    <DropdownMenu>\n                                                        <DropdownItem header disabled>\n                                                            TURN ON OR OFF\n                            </DropdownItem>\n                                                        <DropdownItem divider />\n                                                        <DropdownItem\n                                                            onClick={this.featureBooleanChange}\n                                                            active={this.state.temp_bool_on_true}\n                                                        >\n                                                            ON\n                            </DropdownItem>\n                                                        <DropdownItem\n                                                            onClick={this.featureBooleanChange}\n                                                            active={this.state.temp_bool_off_true}\n                                                        >\n                                                            OFF\n                            </DropdownItem> \n                                                    </DropdownMenu>\n                                                </Dropdown>{\" \"}\n                                                <br />\n                                                {TemporaryVariations.map((val, idx) => {\n                                                    let variationsId = `variation-${idx}`,\n                                                        keysId = `key-${idx}`,\n                                                        descriptionsId = `description-${idx}`;\n                                                    return (\n                                                        <div\n                                                            key={idx}\n                                                            class=\"pagination-centered bg-white text-dark mr-2 mb-5 pb-5 \"\n                                                        >\n                                                            {/** Labels */}\n                                                            <div>\n                                                                <label className=\"col-md-5\" id={idx}>\n                                                                    Variation {idx + 1}\n                                                                </label>\n                                                                <label className=\"col-md-4\" id={idx}>\n                                                                    Key\n                                </label>\n                                                                <label className=\"col-md-3\" id={idx}>\n                                                                    Description\n                                </label>\n                                                            </div>{\" \"}\n                                                            <div style={{ display: \"inline\" }}>\n      \n                                                                <Field\n                                                                    name={\n                                                                        \"variationArray[\" + idx + \"].variationName\"\n                                                                    }\n                                                                    type=\"text\"\n                                                                    placeholder={\"Variation \" + (idx + 1)}\n                                                                    onBlur={props.handleBlur}\n                                                                    id={variationsId}\n                                                                    style={{ display: \"inline\" }}\n                                                                    className=\"col-md-5\"\n                                                                    value={\n                                                                        this.state.TemporaryVariations[idx]\n                                                                            .variationName\n                                                                    } \n                                                                    onChange={() => {\n                                                                        this.tempvarvalueOnChange(idx);\n                                                                    }}\n                                                                />\n                                                                    <Field\n                                                                    name=\"variationKey\"\n                                                                    type=\"text\"\n                                                                    placeholder=\"Key\"\n                                                                    onBlur={props.handleBlur}\n                                                                    style={{ display: \"inline\" }}\n                                                                    className=\"col-md-4\"\n                                                                    value={\n                                                                        this.state.TemporaryVariations[idx].key\n                                                                    }\n                                                                    onChange={() => {\n                                                                        this.tempkeyvalueOnChange(idx);\n                                                                    }}\n                                                                    id={keysId}\n                                                                />\n                                                  <Field\n                                                                    name=\"variationDesc\"\n                                                                    type=\"text\"\n                                                                    style={{ display: \"inline\" }}\n                                                                    className=\"col-md-3\"\n                                                                    value={\n                                                                        this.state.TemporaryVariations[idx]\n                                                                            .description\n                                                                    }\n                                                                    onChange={() => {\n                                                                        this.tempdescvalueOnChange(idx);\n                                                                    }}\n                                                                    id={descriptionsId}\n                                                                    placeholder=\"Enter ... \"\n                                                                />\n                                                                <br></br>\n                                                                <ErrorMessage\n                                                                    name={\n                                                                        \"variationArray[\" + idx + \"].variationName\"\n                                                                    }\n                                                                />\n                                                                <ErrorMessage name=\"variationKey\" />\n                                                                <ErrorMessage name=\"variationDesc\" />\n                                                            </div>\n                                                        </div>\n                                                    );\n                                                })}\n                                                <Button onClick={this.addVariation}>\n                                                    +Add Variation\n                        </Button>\n                                            </ModalBody>\n                                            <ModalFooter>\n                                                <Button color=\"primary\" onClick={this.addFeature}>\n                                                    SUBMIT\n                        </Button>\n                                            </ModalFooter>\n                                        </Modal>\n                                    </Form>\n                                )}\n                            />\n                        </div>\n                    </div>\n                    <br></br>\n                    <br></br>\n                    {/** WHITE AREA STARTS */}\n                    <div class=\"row pb-4 pt-5 bg-white text-dark\">\n                        <div class=\"col-md-11\">\n                            {/*  - AUTO-SUGGESTION  */}\n                            <Autosuggest\n                                suggestions={suggestions}\n                                onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n                                onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n                                getSuggestionValue={getSuggestionValue}\n                                renderSuggestion={renderSuggestion}\n                                inputProps={inputProps}\n                            />\n                        </div>\n                        <div class=\"col-md-1\">\n                            <Button\n                                class=\"col-md-1\"\n                                onClick={this.SearchNow}\n                                style={{ height: \"40px\" }}\n                            >\n                                <img src=\"https://img.icons8.com/material/24/000000/search--v1.png\" />\n                            </Button>\n                        </div>{\" \"}\n                    </div>\n\n                    {/***\n           *\n           * FIRST CONDTION MEET - NO Search text\n           *\n           */}\n                    {!this.state.renderSearch ? (\n                        <div class=\"row pagination-centered bg-white text-dark mb-5 pb-5\">\n                            {/** MAPPING */}\n                            {featureItem.map((val, idx) => {\n                                let featureId = `feature-${idx}`,\n                                    descriptionId = `description-${idx}`,\n                                    switchOnId = `switch-${idx}`;\n                                return (\n                                    <div key={idx} class=\"mr-0 mb-5 col-md-3\">\n                                        {/** BORDER STARTS */}\n                                        <div\n                                            class=\"col border border-dark\"\n                                            style={{ height: \"120px\" }}\n                                        >\n                                            {/** COMPOENNT WITHIN WHOLE BORDER STARTS */}\n                                            <div id=\"WHOLE_COMPONENT_TO_RENDER\" class=\"row\">\n                                                {/** FEATURE NO with color*/}\n                                                <label\n                                                    htmlFor={featureId}\n                                                    class=\"bg-secondary text-white col-md-12\"\n                                                >\n                                                    <label class=\"pr-5 mt-1 pt-0\">\n                                                        {this.state.featureItem[idx].featureNo}\n                                                    </label>\n                                                    {/** SWITCH LABEL */}\n                                                    <label\n                                                        class=\"pt-2 mt-2 mr-0 pr-0 \"\n                                                        style={{ width: \"0px\" }}\n                                                    >\n                                                        <div>\n                                                            <Switch\n                                                                name={switchOnId}\n                                                                id={switchOnId}\n                                                                idx={idx}\n                                                                data_id={idx}\n                                                                className=\"switchOn\"\n                                                                checked={featureItem[idx].switchOn}\n                                                                onChange={() =>\n                                                                    this.handleSwitchChange(\n                                                                        idx,\n                                                                        featureItem[idx].switchOn\n                                                                    )\n                                                                }\n                                                            />\n                                                        </div>\n                                                    </label>\n                                                </label>\n                                                {/** COLOR BLACK of heading of feature item ENDS HERE */}\n                                                <br />\n\n                                                {/** LABEL FOR DESCRIPTION of feature item*/}\n                                                <label class=\"pl-3\" htmlFor={descriptionId}>\n                                                    {this.state.featureItem[idx].description}\n                                                </label>\n                                            </div>\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    ) : (\n                            <div>\n                                {/***\n               *\n               * SECOND CONDTION - A search text exists SO we will render accordingly\n               *\n               */}\n                                <div class=\"row pagination-centered bg-white text-dark mb-5 pb-5\">\n                                    {/** MAPPING */}\n                                    {this.state.searchedFeatureIndexes.map((val, idx) => {\n                                        let featureId = `feature-${val}`,\n                                            descriptionId = `description-${val}`,\n                                            switchOnId = `switch-${val}`;\n                                        return (\n                                            <div key={idx} class=\"mr-0 mb-5 col-md-3\">\n                                                {/** BORDER STARTS */}\n                                                <div\n                                                    class=\"col border border-dark \"\n                                                    style={{ height: \"120px\" }}\n                                                >\n                                                    {/** COMPOENENT WITHIN WHOLE BORDER STARTS */}\n                                                    <div id=\"WHOLE_COMPONENT_TO_RENDER\" class=\"row\">\n                                                        {/** FEATURE NO with color*/}\n                                                        <label\n                                                            htmlFor={featureId}\n                                                            class=\"bg-secondary text-white col-md-12\"\n                                                        >\n                                                            <label class=\"pr-5 mt-1 pt-0\">\n                                                                {this.state.featureItem[val].featureNo}\n                                                            </label>\n                                                            {/** SWITCH LABEL */}\n                                                            <label\n                                                                class=\"pt-2 mt-2 mr-0 pr-0 \"\n                                                                style={{ width: \"0px\" }}\n                                                            >\n                                                                <div>\n                                                                    <Switch\n                                                                        name={switchOnId}\n                                                                        id={switchOnId}\n                                                                        idx={val}\n                                                                        data_id={val}\n                                                                        className=\"switchOn\"\n                                                                        checked={featureItem[val].switchOn}\n                                                                        onChange={() =>\n                                                                            this.handleSwitchChange(\n                                                                                val,\n                                                                                featureItem[val].switchOn\n                                                                            )\n                                                                        }\n                                                                    />\n                                                                </div>\n                                                            </label>\n                                                        </label>\n                                                        {/** COLOR BLACK ENDS HERE */}\n                                                        <br />\n\n                                                        {/** LABEL FOR DESCRIPTION*/}\n                                                        <label class=\"pl-3\" htmlFor={descriptionId}>\n                                                            {this.state.featureItem[val].description}\n                                                        </label>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        )}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MyForm;","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass ClassCounter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n  render() {\n    return (\n      <div>\n        <Button onClick={this.incrementCount}>Count: {this.state.count}</Button>\n      </div>\n    );\n  }\n}\n\nexport default ClassCounter;\n","import React, { Component } from \"react\";\nclass DataFetching extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      weather: null\n    };\n  }\n\n  async componentDidMount() {\n    //const url = \"https://api.randomuser.me/\";\n    const url =\n      \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\";\n    //await waits for getting all data\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(\"DATA FETCH FROM URL: \\n\\n\" + data);\n    // console.log(\"DATA FETCH FROM URL [results 0]: \\n\\n\" + data.results[0]);\n    this.setState({ weather: data.coord, loading: false }, () => {\n      console.log(\"FIRST PERSON: \\n\\n\" + this.state.weather);\n    });\n  }\n  render() {\n    return (\n      <div>\n        {this.state.loading || !this.state.weather ? (\n          <div>loading...</div>\n        ) : (\n          <div>\n            <h1>DATA RETRIEVED FROM WEATHER API</h1>\n            <h2>\n              Longitude:\n              {this.state.weather.lon}, Latitude: {this.state.weather.lat}\n            </h2>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default DataFetching;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nclass ChildListStateUp extends Component {\n  render() {\n    return (\n      <div>\n        <Button onClick={this.props.incrementCount}>\n          Count: {this.props.count}\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default ChildListStateUp;\n","const IMAGES = {\n  LOAD: \"IMAGE_LOAD\",\n  LOAD_SUCCESS: \"IMAGES_LOAD_SUCCESS\",\n  LOAD_FAIL: \"IMAGES_LOAD_FAIL\"\n};\n\nexport { IMAGES };\n","import React, { Component } from \"react\";\nimport ChildListStateUp from \"./LiftingStateUpComponent\";\n\nclass StateLiftedParent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  incrementCount = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n  render() {\n    return (\n      <div>\n        <h1>HERE WE LIFTED STATE UP</h1>\n        <ChildListStateUp\n          incrementCount={this.incrementCount}\n          count={this.state.count}\n        />\n        <ChildListStateUp\n          incrementCount={this.incrementCount}\n          count={this.state.count}\n        />\n      </div>\n    );\n  }\n}\n\nexport default StateLiftedParent;\n","import { IMAGES } from \"../components/SagaStatusConstants\";\n\n//payload is sent as images property\nconst loadingReducer = (state = [], action) => {\n  if (action.type === IMAGES.LOAD) {\n    return true;\n  } else if (action.type === IMAGES.LOAD_SUCCESS) {\n    return false;\n  } else if (action.type === IMAGES.LOAD_FAIL) {\n    return false;\n  }\n\n  return state;\n};\n\nexport default loadingReducer;\n","import { IMAGES } from \"../components/SagaStatusConstants\";\n\n//payload is sent as images property\nconst imageReducer = (state = [], action) => {\n  if (action.type === IMAGES.LOAD_SUCCESS) {\n    return [...state, ...action.images];\n  }\n  return state;\n};\n\nexport default imageReducer;\n","import { IMAGES } from \"../components/SagaStatusConstants\";\n\n//payload is sent as images property\nconst errorReducer = (state = [], action) => {\n  if (action.type === IMAGES.LOAD) {\n    return null;\n  } else if (action.type === IMAGES.LOAD_SUCCESS) {\n    return null;\n  } else if (action.type === IMAGES.LOAD_FAIL) {\n    return action.error;\n  }\n\n  return state;\n};\n\nexport default errorReducer;\n","import { combineReducers } from \"redux\";\n\nimport loadingReducer from \"./SagaLoadingReducer\";\nimport imageReducer from \"./SagaImageReducer\";\nimport errorReducer from \"./SagaErrorReducer\";\n\nconst rootReducer = combineReducers({\n  isloading: loadingReducer,\n  images: imageReducer,\n  error: errorReducer\n});\n\nexport default rootReducer;\n","//import \"babel-polyfill\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\n//{} used below is to directly access as a function\n// rather than first setting it as a variable\nimport { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\n//from the index file\nimport allReducers from \"./reducers\";\nimport { Provider } from \"react-redux\";\n//import App from \"./components/App\";\n//import App from \"./components/App2\";\nimport App from \"./components/App3\";\nimport ReduxApp from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport LoginForm from \"./components/loginForm\";\n//import MyForm from \"./components/dynamicForms\";\nimport MyForm from \"./components/dynamicFormsComponents/dynamicFom\";\nimport ClassCounter from \"./components/ClassCounterHook\";\nimport HookCounter from \"./components/ClassCounterUsingHooks\";\nimport HookCounter2 from \"./components/ClassCounterUsingHooks2\";\nimport HookCounter3 from \"./components/ClassCounterUsingHooks3\";\nimport HookCounter4 from \"./components/ClassCounterUsingHooks4\";\nimport DataFetching from \"./components/FetchData\";\nimport StateLiftedParent from \"./components/StateLiftedParent\";\nimport thunk from \"redux-thunk\";\nimport fetchMyWeatherData from \"./action/index\";\nimport namereducer from \"./reducers/namereducerPractice\";\nimport wishreducer from \"./reducers/wishreducerPractice\";\nimport changeInputBoxReducer from \"./reducers/changeInputBoxReducerPractice\";\nimport configureStore from \"./store/SagaStore\";\n\n//composeEnhancer used for access to dev tool in the browser\n\n//CREATING A STORE\n//A STORE IS DECLARED CONSTANT as till end we will not change it ourself\n//else throws errors\n\n/*\nconst initialState = {\n  users: {},\n  activeUser: {},\n  InputBoxesUpdater: { name: \"\", email: \"\", pass: \"\" },\n  form: {}\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  allReducers,\n  initialState,\n  composeEnhancers(applyMiddleware(thunk))\n);\n*/\n/*\nconsole.log(\n  \"Current State of Store: \" + JSON.stringify(store.getState(), null, 4)\n); // 0\n*/\n\n//you have all reducer as store here defines all the reducers\n//1 which selects unique item\n//2 which sends all items\n\n//fetchMyWeatherData();\n//store.dispatch(fetchMyWeatherData());\n\n// redux done tutorial hindi\n/*\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n//store object is the initial state\nconst storeObject = {\n  name: \"Talha\",\n  wish: [\"eat\", \"Developer\", \"sleep\"],\n  inputBoxChanger: \"initial input\"\n};\n//here now\n//name is for name reducer and\n//wish is for wish reducer\n//SPECIFIED TO IT\n\n//THIS JSON OBJECT MMUST HAVE SAME NAME AS STORE OBJECT(INITIAL STATE)\nconst javscriptObjectOfAllReducer = {\n  name: namereducer,\n  wish: wishreducer,\n  inputBoxChanger: changeInputBoxReducer\n};\n\nconst masterReducer = combineReducers(javscriptObjectOfAllReducer);\n//createStore is combination of masterReducer, storeObjectInitial and middleware passed\nconst store2 = createStore(\n  masterReducer,\n  storeObject,\n  composeEnhancers(applyMiddleware(thunk))\n);\n//we send to app a store containing\n//1 all reducers: name and wish\n//2 object of initial state\n//3 thunk for fetch data\n\nconsole.log(\n  \"Initial State of Store [inside Index.js]: \" +\n    JSON.stringify(store2.getState(), null, 4)\n);\nReactDOM.render(\n  <Provider store={store2}>\n    <ReduxApp />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n*/\n\n/*\n//TO BE CONTINUED\n//For redux SAGA\nReactDOM.render(\n  <Provider store={configureStore}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n*/\n//ReactDOM.render(<loginForm />, document.getElementById(\"root\"));\nReactDOM.render(<MyForm />, document.getElementById(\"root\"));\n//ReactDOM.render(<ClassCounter />, document.getElementById(\"root\"));\n//ReactDOM.render(<DataFetching />, document.getElementById(\"root\"));\n//ReactDOM.render(<StateLiftedParent />, document.getElementById(\"root\"));\n\n/*\nReactDOM.render(\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>,\n  document.getElementById(\"root\")\n);\n*/\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}